#!/usr/bin/env ruby

require 'mini_magick'

class ::Nanoc::Site
  def item_of
    @item_of ||= {}
  end
end

preprocess do
  ::Nanoc::Preprocessors::Pagination.configure do |config|
    template = items.find { |item| item.identifier == '/' }
    items.delete template
    site.blog.items.delete template

    # blog index pagination
    pages = config.paginate site.blog.articles, 10, template, '/p:num'
    site.blog.items.concat pages
    items.concat pages
  end

  items.each do |item|
    site.item_of[item.identifier] = item
    if %w(jpg png).include?(item[:extension])
      image = MiniMagick::Image.open(item.raw_filename)
      item[:width] = image[:width]
      item[:height] = image[:height]
    end

    item[:site] ||= 'blog'
    item[:kind] ||= 'page'
    item[:tags] ||= []
    if item[:title].nil?
      item[:title] = File.basename(item.identifier.chop).gsub(/[-_ ]+/, ' ').capitalize
    elsif item[:title] == false
      item[:title] = nil
    end

    html_extensions = %w(erb md markdown hb hbs handlebars)

    extensions = item[:extension].split('.')
    if html_extensions.include?(extensions.first)
      extensions.unshift 'html'
    end
    item[:split_extensions] = extensions
  end

  site.blog.items.each do |item|
    item[:sidebar] = true if item[:sidebar].nil?
    if item[:kind] == 'article'
      item[:page_layout] = 'blog'
      item[:comment] = true if item[:comment].nil?
    end
  end

  HandlebarsHelpers.site = site
  HandlebarsHelpers.methods(false).each do |method|
    proc = HandlebarsHelpers.method(method).to_proc
    site.handlebars.register_helper(method, &proc)
  end
end

compile 'assets/*' do
end

compile '*' do
  extensions = item[:split_extensions]

  extensions.reverse_each do |ext|
    case ext
    when 'handlebars', 'hbs', 'hb'
      filter :configurable_handlebars
    when 'md', 'markdown'
      filter :redcarpet, {
        :options => {
          :no_intra_emphasis => true,
          :tables => true,
          :fenced_code_blocks => true,
          :autolink => true
        }
      }
    when 'erb'
      filter :erubis
    when 'html'
      page_layout = item[:page_layout] || item[:kind]
      page_layout = nil if item[:page_layout] == false
      layout page_layout if page_layout
      layout item[:layout] || 'default'
    end
  end
end

route '/p1' do
  '/index.html'
end
route %r(^/p\d+/) do
  item.identifier + 'index.html'
end

route '*' do
  extensions = item[:split_extensions]

  if extensions.first == 'html'
    item.identifier + 'index.html'
  else
    target = [item.identifier.chop, item[:extension]].join('.')
    if item.identifier =~ %r{^/\d{4}/\d{2}/(.*)}
      '/gallery' + target
    else
      target
    end
  end
end

layout '*', :erubis
